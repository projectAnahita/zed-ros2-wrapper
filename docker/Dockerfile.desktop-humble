ARG UBUNTU_MAJOR=22
ARG UBUNTU_MINOR=04
ARG CUDA_MAJOR=12
ARG CUDA_MINOR=1
ARG CUDA_PATCH=0
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=1
ARG ZED_SDK_PATCH=4

ARG IMAGE_NAME=nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubuntu${UBUNTU_MAJOR}.${UBUNTU_MINOR}

FROM ${IMAGE_NAME}

# Re-declare ARGs after FROM
ARG UBUNTU_MAJOR
ARG UBUNTU_MINOR
ARG CUDA_MAJOR
ARG CUDA_MINOR
ARG CUDA_PATCH
ARG ZED_SDK_MAJOR
ARG ZED_SDK_MINOR
ARG ZED_SDK_PATCH
ARG ROS2_DIST=humble

# Environment setup
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV ROS_DISTRO=${ROS2_DIST}
ENV NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility
ENV ZED_SDK_URL="https://stereolabs.sfo2.cdn.digitaloceanspaces.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/ZED_SDK_Ubuntu${UBUNTU_MAJOR}_cuda${CUDA_MAJOR}.${CUDA_MINOR}_v${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}.${ZED_SDK_PATCH}.zstd.run"

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils \
    bash-completion \
    build-essential \
    cmake \
    curl \
    dialog \
    git \
    jq \
    less \
    libegl1-mesa \
    libgl1-mesa-glx \
    libpq-dev \
    locales \
    lsb-release \
    micro \
    xclip \
    python3-dev \
    python3-pip \
    python3-venv \
    python3-wheel \
    software-properties-common \
    sudo \
    udev \
    usbutils \
    wget \
    zstd \
    # Audio dependencies
    alsa-utils \
    ffmpeg \
    pavucontrol \
    portaudio19-dev \
    pulseaudio \
    pulseaudio-utils \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \
    && rm -rf /var/lib/apt/lists/* \
    && wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb \
    && dpkg -i cuda-keyring_1.1-1_all.deb \
    && apt-get update \
    && apt-get install -y cudnn-cuda-12 \
    && rm -f cuda-keyring_1.1-1_all.deb \
    && rm -rf /var/lib/apt/lists/*

# Set up ROS2 repository
RUN apt-get update && apt-get install -y --no-install-recommends \
    software-properties-common \
    && add-apt-repository universe \
    && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
    && rm -rf /var/lib/apt/lists/*

# Install ROS2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-ros-base \
    ros-${ROS_DISTRO}-ament-cmake-auto \
    ros-${ROS_DISTRO}-ament-cmake-clang-format \
    ros-${ROS_DISTRO}-diagnostic-updater \
    ros-${ROS_DISTRO}-image-transport \
    ros-${ROS_DISTRO}-image-transport-plugins \
    ros-${ROS_DISTRO}-joint-state-publisher \
    ros-${ROS_DISTRO}-joint-state-publisher-gui \
    ros-${ROS_DISTRO}-moveit \
    ros-${ROS_DISTRO}-moveit-common \
    ros-${ROS_DISTRO}-moveit-ros-planning \
    ros-${ROS_DISTRO}-moveit-ros-planning-interface \
    ros-${ROS_DISTRO}-moveit-visual-tools \
    ros-${ROS_DISTRO}-rmw-cyclonedds-cpp \
    ros-${ROS_DISTRO}-rmw-fastrtps-cpp \
    ros-${ROS_DISTRO}-robot-state-publisher \
    ros-${ROS_DISTRO}-ros2cli \
    ros-${ROS_DISTRO}-rviz-visual-tools \
    ros-${ROS_DISTRO}-xacro \
    ros-dev-tools \
    && rm -rf /var/lib/apt/lists/* \
    && rosdep init \
    && rosdep update

# Install ZED SDK
RUN echo "CUDA Version $CUDA_VERSION" > /usr/local/cuda/version.txt && \
    wget -q -O ZED_SDK_Linux_Ubuntu.run ${ZED_SDK_URL} && \
    chmod +x ZED_SDK_Linux_Ubuntu.run && \
    ./ZED_SDK_Linux_Ubuntu.run -- silent skip_tools skip_cuda && \
    ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so && \
    rm ZED_SDK_Linux_Ubuntu.run

# Build the ROS2 Wrapper
WORKDIR /root/workspace/ws_zed/src
COPY tmp_sources/ ./

WORKDIR /root/workspace/ws_zed
RUN . /opt/ros/${ROS_DISTRO}/setup.sh && \
    apt-get update -y || true && \
    rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    rm -rf /var/lib/apt/lists/* && \
    colcon build --parallel-workers $(nproc) --symlink-install \
        --event-handlers console_direct+ --base-paths src \
        --cmake-args ' -DCMAKE_BUILD_TYPE=Release' \
        ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' \
        ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"'

# Set up Python virtual environment and install packages
RUN python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --upgrade pip && \
    # Install PyTorch packages first with CUDA support
    pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 && \
    # Install the rest of the packages from PyPI
    pip install \
        typeguard \
        'numpy<2' \
        argcomplete \
        black \
        catkin_pkg \
        colcon-common-extensions \
        colcon-mixin \
        cython \
        empy==3.3.4 \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-docstrings \
        flake8-import-order \
        flake8-quotes \
        imageio \
        lark-parser \
        matplotlib \
        mediapipe \
        mypy \
        opencv-python \
        opencv-python-headless \
        openai \
        pandas \
        pyaudio \
        pydub \
        pyloudnorm \
        pyopengl \
        pyqt5 \
        pvporcupine \
        pytest \
        pytest-cov \
        pytest-repeat \
        pytest-rerunfailures \
        requests \
        resampy \
        scikit-learn \
        scipy \
        sounddevice \
        vcstool \
        webrtcvad \
        nvidia-ml-py3 \
        pytest-asyncio \
        python-dotenv \
        faster-whisper \
        transformers \
        elevenlabs \
        'accelerate>=0.26.0' \
    && rm -rf /root/.cache/pip
        

# Setup shell environment
COPY .bashrc /root/.bashrc
COPY .bash_aliases /root/.bash_aliases

# Set final working directory
WORKDIR /root/workspace/ws_startup/artifex

# Final setup
COPY ros_entrypoint.sh /sbin/ros_entrypoint.sh
RUN chmod 755 /sbin/ros_entrypoint.sh && \
    mkdir -p /root/.config/pulse

ENTRYPOINT ["/sbin/ros_entrypoint.sh"]
CMD ["bash"]