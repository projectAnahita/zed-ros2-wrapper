ARG UBUNTU_MAJOR=22
ARG UBUNTU_MINOR=04
ARG CUDA_MAJOR=12
ARG CUDA_MINOR=1
ARG CUDA_PATCH=0
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=1
ARG ZED_SDK_PATCH=4

ARG IMAGE_NAME=nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubuntu${UBUNTU_MAJOR}.${UBUNTU_MINOR}

FROM ${IMAGE_NAME}

ARG UBUNTU_MAJOR
ARG UBUNTU_MINOR
ARG CUDA_MAJOR
ARG CUDA_MINOR
ARG CUDA_PATCH
ARG ZED_SDK_MAJOR
ARG ZED_SDK_MINOR
ARG ZED_SDK_PATCH
ARG ROS2_DIST=humble

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility
ENV ZED_SDK_URL="https://stereolabs.sfo2.cdn.digitaloceanspaces.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/ZED_SDK_Ubuntu${UBUNTU_MAJOR}_cuda${CUDA_MAJOR}.${CUDA_MINOR}_v${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}.${ZED_SDK_PATCH}.zstd.run"

# Install dependencies and set up environment
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-utils dialog curl lsb-release wget less udev sudo build-essential \
    cmake python3 python3-dev python3-pip python3-wheel python3-venv git jq \
    libpq-dev zstd usbutils locales software-properties-common bash-completion \
    libgl1-mesa-glx libegl1-mesa \
    portaudio19-dev pulseaudio pulseaudio-utils pavucontrol ffmpeg alsa-utils \
    micro \
    && rm -rf /var/lib/apt/lists/* \
    && locale-gen en_US en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Set up ROS2 repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS2 packages and tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS2_DIST}-ros-base \
    ros-${ROS2_DIST}-ament-cmake-clang-format \
    ros-${ROS2_DIST}-image-transport \
    ros-${ROS2_DIST}-image-transport-plugins \
    ros-${ROS2_DIST}-diagnostic-updater \
    ros-${ROS2_DIST}-xacro \
    ros-${ROS2_DIST}-rmw-fastrtps-cpp \
    ros-${ROS2_DIST}-rmw-cyclonedds-cpp \
    ros-${ROS2_DIST}-moveit \
    ros-${ROS2_DIST}-moveit-common \
    ros-${ROS2_DIST}-moveit-ros-planning \
    ros-${ROS2_DIST}-moveit-ros-planning-interface \
    ros-${ROS2_DIST}-moveit-visual-tools \
    ros-${ROS2_DIST}-rviz-visual-tools \
    ros-${ROS2_DIST}-joint-state-publisher \
    ros-${ROS2_DIST}-joint-state-publisher-gui \
    ros-${ROS2_DIST}-robot-state-publisher \
    ros-${ROS2_DIST}-ros2cli \
    python3-flake8-docstrings \
    python3-pip \
    python3-pytest-cov \
    ros-dev-tools \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Install ZED SDK
RUN wget -q -O ZED_SDK_Linux_Ubuntu.run ${ZED_SDK_URL} \
    && chmod +x ZED_SDK_Linux_Ubuntu.run \
    && ./ZED_SDK_Linux_Ubuntu.run -- silent skip_tools skip_cuda \
    && ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so \
    && rm ZED_SDK_Linux_Ubuntu.run

# Set up system-wide ROS2 workspace
WORKDIR /root/ros2_ws/src
COPY tmp_sources/ ./

WORKDIR /root/ros2_ws
RUN . /opt/ros/$ROS2_DIST/setup.sh \
    && apt-get update \
    && rosdep install --from-paths src --ignore-src -r -y \
    && rm -rf /var/lib/apt/lists/* \
    && colcon build --parallel-workers $(nproc) --symlink-install \
       --event-handlers console_direct+ --base-paths src \
       --cmake-args ' -DCMAKE_BUILD_TYPE=Release' \
       ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' \
       ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"'

ENV ROS_DISTRO=${ROS2_DIST}

# Set up user development workspace and virtual environment
RUN python3 -m venv /opt/venv && \
    . /opt/venv/bin/activate && \
    pip install --upgrade pip && \
    pip install \
    argcomplete flake8-blind-except flake8-builtins flake8-class-newline \
    flake8-comprehensions flake8-deprecated flake8-import-order flake8-quotes \
    pytest pytest-repeat pytest-rerunfailures \
    colcon-common-extensions colcon-mixin vcstool \
    lark-parser empy==3.3.4 catkin_pkg \
    black mypy \
    cython \
    "numpy<2" \
    scipy pandas matplotlib \
    scikit-learn \
    opencv-python \
    opencv-python-headless \
    pyopengl \
    pyqt5 \
    mediapipe \
    imageio \
    resampy webrtcvad requests pyaudio noisereduce pyloudnorm pydub pvporcupine openai \
    sounddevice

# Copy bash aliases
COPY .bash_aliases /root/.bash_aliases

# Add shell convenience features to .bashrc
RUN echo '# ROS2 and colcon command completion' >> /root/.bashrc \
    && echo 'eval "$(register-python-argcomplete3 ros2)"' >> /root/.bashrc \
    && echo 'eval "$(register-python-argcomplete3 colcon)"' >> /root/.bashrc \
    && echo '' >> /root/.bashrc \
    && echo '# Bash completion' >> /root/.bashrc \
    && echo 'if [ -f /etc/bash_completion ] && ! shopt -oq posix; then' >> /root/.bashrc \
    && echo '    . /etc/bash_completion' >> /root/.bashrc \
    && echo 'fi' >> /root/.bashrc \
    && echo '' >> /root/.bashrc \
    && echo '# Source aliases' >> /root/.bashrc \
    && echo 'if [ -f ~/.bash_aliases ]; then' >> /root/.bashrc \
    && echo '    . ~/.bash_aliases' >> /root/.bashrc \
    && echo 'fi' >> /root/.bashrc

# Update ros_entrypoint.sh
COPY ros_entrypoint.sh /sbin/ros_entrypoint.sh
RUN chmod 755 /sbin/ros_entrypoint.sh

RUN mkdir -p /root/.config/pulse

ENTRYPOINT ["/sbin/ros_entrypoint.sh"]
CMD ["bash"]
