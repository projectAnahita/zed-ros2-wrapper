# Use the base image that already has ROS2 Humble on L4T 35.3.1
FROM dustynv/ros:humble-ros-base-l4t-r35.3.1

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    RMW_IMPLEMENTATION=rmw_fastrtps_cpp

# Set dependency versions (matching build_wrapper.sh exactly)
ENV XACRO_VERSION=2.0.8 \
    DIAGNOSTICS_VERSION=3.0.0 \
    AMENT_LINT_VERSION=0.12.4 \
    GEOGRAPHIC_INFO_VERSION=1.0.4 \
    ROBOT_LOCALIZATION_VERSION=3.4.2 \
    DRACO_VERSION=1.5.6

# ZED SDK variables
ARG ZED_SDK_MAJOR=4
ARG ZED_SDK_MINOR=2
ARG ZED_SDK_PATCH=5
ARG ZED_SDK_URL="https://stereolabs.sfo2.cdn.digitaloceanspaces.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/ZED_SDK_Tegra_L4T35.3_v${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}.${ZED_SDK_PATCH}.zstd.run"

# Install required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    build-essential \
    zstd \
    git \
    cmake \
    python3-pip \
    python3-venv \
    python3-vcstool \
    libgeographic-dev \
    && rm -rf /var/lib/apt/lists/*

# Install ZED SDK
RUN if [ "$(curl -I "${ZED_SDK_URL}" -o /dev/null -s -w '%{http_code}\n' | head -n 1)" = "200" ]; then \
        echo "ZED SDK URL is valid." && \
        wget -q --no-check-certificate -O ZED_SDK_Linux_JP.run "${ZED_SDK_URL}" && \
        chmod +x ZED_SDK_Linux_JP.run && \
        ./ZED_SDK_Linux_JP.run silent && \
        rm -rf ZED_SDK_Linux_JP.run; \
    else \
        echo "ZED SDK URL is invalid or the file does not exist." && \
        exit 1; \
    fi

# Install Draco compression library (following build_wrapper.sh exactly)
RUN cd /tmp && \
    git clone https://github.com/google/draco.git && \
    cd draco && \
    git checkout ${DRACO_VERSION} && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_SHARED_LIBS=ON \
        -DDRACO_POINT_CLOUD_COMPRESSION=ON \
        -DDRACO_MESH_COMPRESSION=ON \
        -DDRACO_STANDARD_EDGEBREAKER=ON \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DDRACO_ANIMATION_ENCODING=OFF \
        -DDRACO_TRANSCODER_SUPPORTED=OFF && \
    make -j$(nproc) && \
    make install && \
    echo "/usr/local/lib" > /etc/ld.so.conf.d/draco.conf && \
    ldconfig && \
    cd / && \
    rm -rf /tmp/draco

# Create workspace and clone ZED wrapper (following build_wrapper.sh)
RUN mkdir -p /root/ros2_ws/src
WORKDIR /root/ros2_ws/src

# Clone ZED ROS2 wrapper with submodules
RUN git clone --recursive https://github.com/stereolabs/zed-ros2-wrapper.git --branch humble-v4.1.4

# Clone point_cloud_transport and dependencies
RUN git clone https://github.com/ros2/rcpputils.git --branch humble && \
    git clone https://github.com/ros-perception/point_cloud_transport.git --branch humble && \
    git clone https://github.com/ros-perception/point_cloud_transport_plugins.git --branch humble

# Install missing dependencies (exactly matching build_wrapper.sh)
RUN wget https://github.com/ros/xacro/archive/refs/tags/${XACRO_VERSION}.tar.gz -O - | tar -xvz && mv xacro-${XACRO_VERSION} xacro && \
    wget https://github.com/ros/diagnostics/archive/refs/tags/${DIAGNOSTICS_VERSION}.tar.gz -O - | tar -xvz && mv diagnostics-${DIAGNOSTICS_VERSION} diagnostics && \
    wget https://github.com/ament/ament_lint/archive/refs/tags/${AMENT_LINT_VERSION}.tar.gz -O - | tar -xvz && mv ament_lint-${AMENT_LINT_VERSION} ament-lint && \
    wget https://github.com/cra-ros-pkg/robot_localization/archive/refs/tags/${ROBOT_LOCALIZATION_VERSION}.tar.gz -O - | tar -xvz && mv robot_localization-${ROBOT_LOCALIZATION_VERSION} robot-localization && \
    wget https://github.com/ros-geographic-info/geographic_info/archive/refs/tags/${GEOGRAPHIC_INFO_VERSION}.tar.gz -O - | tar -xvz && mv geographic_info-${GEOGRAPHIC_INFO_VERSION} geographic-info && \
    cp -r geographic-info/geographic_msgs/ . && \
    rm -rf geographic-info && \
    git clone https://github.com/ros-drivers/nmea_msgs.git --branch ros2 && \
    git clone https://github.com/ros/angles.git --branch humble-devel

WORKDIR /root/ros2_ws

# Build workspace in stages (following build_wrapper.sh exactly)
RUN source /opt/ros/humble/install/setup.bash && \
    # Build rcpputils first
    colcon build --symlink-install \
        --cmake-args " -DCMAKE_BUILD_TYPE=Release" \
        --packages-select rcpputils && \
    source install/setup.bash && \
    # Build point_cloud_transport (required)
    colcon build --symlink-install \
        --cmake-args " -DCMAKE_BUILD_TYPE=Release" \
        --packages-select point_cloud_transport && \
    source install/setup.bash && \
    # Try to build plugins (optional)
    colcon build --symlink-install \
        --cmake-args " -DCMAKE_BUILD_TYPE=Release" \
        --packages-select point_cloud_transport_plugins || true && \
    source install/setup.bash || true && \
    # Build the complete workspace
    colcon build --parallel-workers $(nproc) --symlink-install \
        --event-handlers console_direct+ --base-paths src \
        --cmake-args " -DCMAKE_BUILD_TYPE=Release" \
        " -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs" \
        " -DCMAKE_CXX_FLAGS='-Wl,--allow-shlib-undefined'" \
        " --no-warn-unused-cli" \
        --packages-skip point_cloud_transport_plugins \
        --packages-ignore ament_cppcheck ament_lint ament_lint_auto ament_flake8 ament_pep257 \
        ament_copyright ament_cpplint ament_lint_cmake ament_uncrustify ament_xmllint \
        ament_cmake_lint_cmake ament_cmake_copyright ament_cmake_cppcheck ament_cmake_cpplint \
        ament_cmake_flake8 ament_cmake_pep257 ament_cmake_uncrustify ament_cmake_xmllint ament_lint_common

# Add sourcing to .bashrc
RUN echo "source /root/ros2_ws/install/setup.bash" >> /root/.bashrc

# Setup environment variables and entrypoint
WORKDIR /root/ros2_ws
COPY ros_entrypoint_jetson.sh /sbin/ros_entrypoint.sh
RUN chmod 755 /sbin/ros_entrypoint.sh

ENTRYPOINT ["/sbin/ros_entrypoint.sh"]
CMD ["bash"] 